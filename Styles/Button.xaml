<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:m3="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:cp="clr-namespace:MaterialDesignThemes.Wpf.Converters.CircularProgressBar;assembly=MaterialDesignThemes.Wpf">

    <Style x:Key="M3FloatingActionMiniButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.Primary.Light}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Primary.Light}" />
        <Setter Property="Height" Value="40" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Tag" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator
                            CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(m3:ShadowAssist.CacheMode)}">
                            <Ellipse x:Name="border"
                                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ElevationAssist.Elevation), Converter={x:Static m3:ShadowConverter.Instance}}"
                                     Fill="{TemplateBinding Background}"
                                     Stroke="{TemplateBinding BorderBrush}"
                                     StrokeThickness="{TemplateBinding BorderThickness}" />
                        </AdornerDecorator>
                        <ProgressBar x:Name="ProgressBar"
                                     Width="{TemplateBinding Width, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource ProgressRingStrokeWidth}}"
                                     Height="{TemplateBinding Height, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource ProgressRingStrokeWidth}}"
                                     Margin="-8"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Stretch"
                                     Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.IndicatorBackground)}"
                                     Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.IndicatorForeground)}"
                                     IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.IsIndeterminate)}"
                                     Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.Maximum)}"
                                     Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.Minimum)}"
                                     Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.Opacity)}"
                                     RenderTransformOrigin=".5, .5"
                                     Style="{DynamicResource MaterialDesignCircularProgressBar}"
                                     Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.IsIndicatorVisible), Converter={x:Static m3:BooleanToVisibilityConverter.CollapsedInstance}}"
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(m3:ButtonProgressAssist.Value)}">
                            <ProgressBar.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0" ScaleY="0" />
                                </TransformGroup>
                            </ProgressBar.RenderTransform>
                        </ProgressBar>
                        <Ellipse Fill="{TemplateBinding Background}"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{TemplateBinding BorderThickness}" />
                        <m3:Ripple Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}"
                                   ClipToBounds="True"
                                   Content="{TemplateBinding Content}"
                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                   Focusable="False"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Ellipse x:Name="GeometryEllipse"
                                 Fill="Transparent"
                                 Focusable="False"
                                 IsHitTestVisible="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter TargetName="border" Property="Stroke"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background"
                                    Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={x:Static m3:BrushOpacityConverter.Instance}, ConverterParameter=0.1}" />
                            <Setter Property="BorderBrush"
                                    Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={x:Static m3:BrushOpacityConverter.Instance}, ConverterParameter=0.1}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="m3:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="m3:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="m3:ButtonProgressAssist.IsIndicatorVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ProgressBar"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         From=".9"
                                                         To="1"
                                                         Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="ProgressBar"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         From=".9"
                                                         To="1"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ProgressBar"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         From="1"
                                                         To=".9"
                                                         Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="ProgressBar"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         From="1"
                                                         To=".9"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="m3:ButtonProgressAssist.IndicatorBackground"
                Value="{DynamicResource MaterialDesign.Brush.TextBox.HoverBackground}" />
        <Setter Property="m3:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource MaterialDesign.Brush.Secondary}" />
        <Setter Property="m3:ButtonProgressAssist.Opacity" Value="1" />
        <Setter Property="m3:ElevationAssist.Elevation" Value="Dp6" />
        <Setter Property="m3:RippleAssist.Feedback" Value="White" />
    </Style>

    <Style x:Key="M3FloatingActionMiniSecondaryButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource M3FloatingActionMiniButton}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.Secondary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.Secondary}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Secondary.Foreground}" />
    </Style>

    <Style x:Key="M3CircularProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Primary}" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="IsIndeterminateStoryboard"
                                    RepeatBehavior="Forever"
                                    TargetProperty="Angle"
                                    TargetName="RotateTransform">
                            <DoubleAnimation From="0"
                                             To="359"
                                             Duration="0:0:2" />
                        </Storyboard>
                        <Storyboard x:Key="IsFullyIndeterminateStoryboard">
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                           Storyboard.TargetName="FullyIndeterminateGridScaleTransform"
                                                           Storyboard.TargetProperty="ScaleX">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                                <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                                <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimation RepeatBehavior="Forever"
                                             Storyboard.TargetName="RotateTransform"
                                             Storyboard.TargetProperty="Angle"
                                             From="00"
                                             To="359"
                                             Duration="0:0:1.25" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" ClipToBounds="False">
                        <Grid x:Name="FullyIndeterminateGrid">
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform" ScaleX="0" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="PathGrid" Margin="2" />
                        <Canvas>
                            <Ellipse Width="{TemplateBinding Width}"
                                     Height="{TemplateBinding Height}"
                                     Fill="{TemplateBinding Background}" />
                            <Path x:Name="Path"
                                  Canvas.Left="2"
                                  Canvas.Top="2"
                                  RenderTransformOrigin="0, 0"
                                  Stroke="{TemplateBinding Foreground}"
                                  StrokeThickness="3">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure
                                            StartPoint="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static cp:StartPointConverter.Instance}, Mode=OneWay}">
                                            <ArcSegment
                                                Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static cp:ArcSizeConverter.Instance}, Mode=OneWay}"
                                                SweepDirection="Clockwise">
                                                <ArcSegment.Point>
                                                    <MultiBinding
                                                        Converter="{x:Static cp:ArcEndPointConverter.Instance}"
                                                        ConverterParameter="{x:Static cp:ArcEndPointConverter.ParameterMidPoint}">
                                                        <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                        <Binding Path="Value"
                                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                                        <Binding Path="Minimum"
                                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                                        <Binding Path="Maximum"
                                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                                        <Binding ElementName="FullyIndeterminateGridScaleTransform"
                                                                 Path="ScaleX" />
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                            <ArcSegment
                                                Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static cp:ArcSizeConverter.Instance}, Mode=OneWay}"
                                                SweepDirection="Clockwise">
                                                <ArcSegment.Point>
                                                    <MultiBinding
                                                        Converter="{x:Static cp:ArcEndPointConverter.Instance}">
                                                        <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                        <Binding Path="Value"
                                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                                        <Binding Path="Minimum"
                                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                                        <Binding Path="Maximum"
                                                                 RelativeSource="{RelativeSource TemplatedParent}" />
                                                        <Binding ElementName="FullyIndeterminateGridScaleTransform"
                                                                 Path="ScaleX" />
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform x:Name="RotateTransform"
                                                         CenterX="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static cp:RotateTransformCentreConverter.Instance}, Mode=OneWay}"
                                                         CenterY="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static cp:RotateTransformCentreConverter.Instance}, Mode=OneWay}" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsIndeterminate, RelativeSource={RelativeSource Self}}"
                                           Value="True" />
                                <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}"
                                           Value="True" />
                                <Condition
                                    Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static m3:NotZeroConverter.Instance}}"
                                    Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Name="IsIndeterminateStoryboard"
                                                 Storyboard="{StaticResource IsIndeterminateStoryboard}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsIndeterminate" Value="True" />
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Value" Value="0" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Name="IsFullyIndeterminateStoryboard"
                                                 Storyboard="{StaticResource IsFullyIndeterminateStoryboard}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="20" />
    </Style>

</ResourceDictionary>